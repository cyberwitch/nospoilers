{"version":3,"sources":["tvmaze/tvmaze.ts","step-one/episode-picker.tsx","step-one/season-picker.tsx","step-one/show-picker.tsx","step-one/step-one.tsx","step-two/browser.tsx","step-two/step-two.tsx","wikimedia/wikimedia.ts","App.tsx","index.tsx"],"names":["PatchedTvmaze","shows","episodes","id","specials","queryString","Promise","resolve","reject","request","get","apiEndpoint","json","err","response","body","Tvmaze","tvmaze","EpisodePicker","props","state","isLoading","results","fetchEpisodes","bind","onChange","clearButton","this","labelKey","formatEpisodeName","options","renderMenuItemChildren","episode","episodeName","image","src","medium","alt","selected","seasonNumber","season","episodeNumber","number","name","show","toString","setState","seasonEpisodes","then","nextSeason","episodebynumber","firstEpsiodeNextSeason","finally","undefined","catch","length","nextEpisodeIndex","indexOf","prevProps","React","Component","SeasonPicker","fetchSeasons","filterBy","formatSeasonName","seasonName","filter","namePart","join","seasons","nextSeasonIndex","ShowPicker","query","onSearch","search","map","StepOne","onSubmit","Jumbotron","Form","Group","Label","onEpisodeChange","renderSeasonPicker","renderEpisodePicker","renderNextButton","nextEpisode","Button","type","e","preventDefault","onNextClick","Browser","html","dangerouslySetInnerHTML","__html","wiki","getPage","page","oldid","parsed","JSON","parse","text","endpoint","rp","uri","qs","origin","action","list","srsearch","format","title","before","prop","titles","rvprop","rvstart","rvlimit","StepTwo","pages","toastVisible","onClick","Fragment","Toast","onClose","autohide","Body","window","scrollTo","className","Alert","variant","Control","value","target","submitted","disabled","loading","renderTabs","Tabs","Tab","key","eventKey","find","getRevision","airstamp","getRevisionResponse","revisions","Object","keys","concat","revid","searchResponse","all","fetchPage","element","tagName","anchor","pathname","startsWith","newtab","substring","replace","href","location","open","addEventListener","removeEventListener","App","activeKey","onSelect","ReactDOM","render","document","getElementById"],"mappings":"ugBAGMA,E,YAGJ,aAAe,IAAD,8BACZ,+CAEKC,MAAMC,SAAW,SAACC,EAAYC,GACjC,IAAIC,EAAW,iBAAaF,EAAb,aAMf,OAJIC,IACFC,GAAe,eAGV,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAQC,IAAR,UAAeV,EAAcW,aAA7B,OAA2CN,GAAe,CAAEO,MAAM,IAAQ,SAACC,EAAKC,GAC9E,GAAID,EACF,OAAOL,EAAOK,GAEdN,EAAQO,EAASC,aAfb,E,kCAHYC,QAAtBhB,EACGW,YAAc,yBAyBhB,IAAMM,EAAS,IAAIjB,ECTbkB,EAAb,YACE,WAAYC,GAA4B,IAAD,8BACrC,4CAAMA,KAEDC,MAAQ,CACXC,WAAW,EACXC,QAAS,IAGX,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBATqB,EADzC,sEAaY,IAAD,OACP,OACE,kBAAC,YAAD,CACErB,GAAG,iBACHuB,aAAa,EACbL,UAAWM,KAAKP,MAAMC,UACtBO,SAAUD,KAAKE,kBACfJ,SAAUE,KAAKF,SACfK,QAASH,KAAKP,MAAME,QACpBS,uBAAwB,SAAAC,GACtB,GAAIA,EAAS,CACX,IAAMC,EAAc,EAAKJ,kBAAkBG,GAC3C,OACE,6BACGA,EAAQE,OAAS,yBAAKC,IAAKH,EAAQE,MAAME,OAAQC,IAAKJ,IACtDA,KAKTK,SAAUX,KAAKR,MAAMmB,SAAW,CAACX,KAAKR,MAAMmB,UAAY,OAjChE,wCAsCoBN,GAChB,IAAIO,EAAgCP,EAAQQ,OACxCD,EAAe,KACjBA,EAAY,WAAOA,IAGrB,IAAIE,EAAiCT,EAAQU,OAK7C,OAJID,EAAgB,KAClBA,EAAa,WAAOA,GAAiB,MAGjC,GAAN,OAAUF,EAAV,YAA0BE,EAA1B,cAA6CT,EAAQW,QAjDzD,sCAoDmB,IAAD,OACRC,EAAOjB,KAAKR,MAAMyB,KAAKzC,GAAG0C,WAEhClB,KAAKmB,SAAS,CAACzB,WAAW,IAEtBM,KAAKR,MAAMqB,OACbvB,EAAOhB,MAAM8C,eAAepB,KAAKR,MAAMqB,OAAOrC,GAAG0C,YAC9CG,MAAK,SAAA1B,GACJ,EAAKwB,SAAS,CAACxB,YAEX,EAAKH,MAAM8B,WACbhC,EAAOhB,MAAMiD,gBAAgBN,EAAM,EAAKzB,MAAM8B,WAAWP,OAAOG,WAAY,KACzEG,MAAK,SAAAG,GAAsB,OAAI,EAAKL,SAAS,CAACK,8BAC9CC,SAAQ,kBAAM,EAAKN,SAAS,CAACzB,WAAW,OAE3C,EAAKyB,SAAS,CAACK,4BAAwBE,EAAWhC,WAAW,OAE9DiC,OAAM,WACP,EAAKR,SAAS,CAACzB,WAAW,OAG9BJ,EAAOhB,MAAMC,SAAS0C,GACnBI,MAAK,SAAA1B,GAAO,OAAI,EAAKwB,SAAS,CAACxB,eAC/B8B,SAAQ,kBAAM,EAAKN,SAAS,CAACzB,WAAW,SA3EjD,+BA+EWiB,GACP,GAAIA,EAASiB,OAAQ,CACnB,IAAMC,EAAmB7B,KAAKP,MAAME,QAAQmC,QAAQnB,EAAS,IAAM,EAE/DX,KAAKP,MAAME,QAAQiC,QAAUC,EAC/B7B,KAAKR,MAAMM,SAASa,EAAS,GAAIX,KAAKP,MAAM+B,wBAE5CxB,KAAKR,MAAMM,SAASa,EAAS,GAAIX,KAAKP,MAAME,QAAQkC,SAGtD7B,KAAKR,MAAMM,aAzFjB,0CA8FIE,KAAKJ,kBA9FT,yCAiGqBmC,GACb/B,KAAKR,MAAMyB,OAASc,EAAUd,MAAQjB,KAAKR,MAAMqB,SAAWkB,EAAUlB,QACxEb,KAAKJ,oBAnGX,GAAmCoC,IAAMC,WCH5BC,EAAb,YACE,WAAY1C,GAA2B,IAAD,8BACpC,4CAAMA,KAEDC,MAAQ,CACXC,WAAW,EACXC,QAAS,IAGX,EAAKwC,aAAe,EAAKA,aAAatC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAToB,EADxC,sEAaY,IAAD,OACP,OACE,kBAAC,YAAD,CACErB,GAAG,gBACHuB,aAAa,EACbqC,SAAU,kBAAM,GAChB1C,UAAWM,KAAKP,MAAMC,UACtBO,SAAUD,KAAKqC,iBACfvC,SAAUE,KAAKF,SACfK,QAASH,KAAKP,MAAME,QACpBS,uBAAwB,SAAAS,GACtB,IAAMyB,EAAa,EAAKD,iBAAiBxB,GACzC,OACE,6BACGA,EAAON,OAAS,yBAAKC,IAAKK,EAAON,MAAME,OAAQC,IAAK4B,IACpDA,IAIP3B,SAAUX,KAAKR,MAAMmB,SAAW,CAACX,KAAKR,MAAMmB,UAAY,OAhChE,uCAqCmBE,GACf,MAAO,CAACA,EAAOE,OAAQF,EAAOG,MAAMuB,QAAO,SAAAC,GAAQ,QAAMA,KAAUC,KAAK,QAtC5E,qCAyCkB,IAAD,OACbzC,KAAKmB,SAAS,CAACzB,WAAW,IAC1BJ,EAAOhB,MAAMoE,QAAQ1C,KAAKR,MAAMyB,KAAKzC,GAAG0C,YACrCG,MAAK,SAAA1B,GAAO,OAAI,EAAKwB,SAAS,CAACxB,eAC/B8B,SAAQ,kBAAM,EAAKN,SAAS,CAACzB,WAAW,SA7C/C,+BAgDWiB,GACP,GAAIA,EAASiB,OAAQ,CACnB,IAAMe,EAAkB3C,KAAKP,MAAME,QAAQmC,QAAQnB,EAAS,IAAM,EAE9DX,KAAKP,MAAME,QAAQiC,QAAUe,EAC/B3C,KAAKR,MAAMM,SAASa,EAAS,IAE7BX,KAAKR,MAAMM,SAASa,EAAS,GAAIX,KAAKP,MAAME,QAAQgD,SAGtD3C,KAAKR,MAAMM,aA1DjB,0CA+DIE,KAAKmC,iBA/DT,yCAkEqBJ,GACb/B,KAAKR,MAAMyB,OAASc,EAAUd,MAChCjB,KAAKmC,mBApEX,GAAkCH,IAAMC,WCA3BW,EAAb,2MACEnD,MAAQ,CACNC,WAAW,EACXmD,MAAO,GACPlD,QAAS,IAJb,wEAOY,IAAD,OACP,OACE,kBAAC,iBAAD,CACEnB,GAAG,cACHuB,aAAa,EACbL,UAAWM,KAAKP,MAAMC,UACtBO,SAAU,SAACgB,GAAD,OAAgBA,EAAKD,MAC/B8B,SAAU,SAAAD,GACR,EAAK1B,SAAS,CAACzB,WAAW,IAC1BJ,EAAOyD,OAAOzE,MAAMuE,GACjBxB,MAAK,SAAA1B,GAAO,OAAI,EAAKwB,SAAS,CAACxB,QAASA,EAAQqD,KAAI,SAAA/B,GAAI,OAAIA,EAAKA,aACjEQ,SAAQ,kBAAM,EAAKN,SAAS,CAACzB,WAAW,QAE7CI,SAAU,SAAAa,GAAQ,OAAI,EAAKnB,MAAMM,SAASa,EAAS,KACnDR,QAASH,KAAKP,MAAME,QACpBS,uBAAwB,SAAAa,GACtB,OACE,6BACGA,EAAKV,OAAS,yBAAKC,IAAKS,EAAKV,MAAME,OAAQC,IAAKO,EAAKD,OACrDC,EAAKD,OAIZL,SAAUX,KAAKR,MAAMmB,SAAW,CAACX,KAAKR,MAAMmB,UAAY,SA9BhE,GAAgCqB,IAAMC,WCMzBgB,EAAb,YACE,WAAYzD,GAAsB,IAAD,8BAC/B,4CAAMA,KAEDC,MAAQ,GAEb,EAAKyD,SAAW,EAAKA,SAASrD,KAAd,gBALe,EADnC,sEASY,IAAD,OACP,OACI,kBAACsD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMF,SAAUlD,KAAKkD,UACnB,kBAACE,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,8CACA,kBAAC,EAAD,CACExD,SAAU,SAAAmB,GACR,EAAKE,SAAS,CAACF,OAAMJ,YAAQa,IAC7B,EAAKlC,MAAM+D,mBAEb5C,SAAUX,KAAKP,MAAMwB,QAGxBjB,KAAKwD,qBACLxD,KAAKyD,sBACLzD,KAAK0D,uBAzBlB,2CA+BwB,IAAD,OACnB,GAAI1D,KAAKP,MAAMwB,KACb,OACE,kBAACmC,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,4CACA,kBAAC,EAAD,CACExD,SAAU,SAACe,EAAQS,GACjB,EAAKH,SAAS,CAACN,SAAQS,eACvB,EAAK9B,MAAM+D,mBAEb5C,SAAUX,KAAKP,MAAMoB,OACrBI,KAAMjB,KAAKP,MAAMwB,UA1C7B,4CAiDyB,IAAD,OACpB,GAAIjB,KAAKP,MAAMwB,KACb,OACE,kBAACmC,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,iDACA,kBAAC,EAAD,CACEhC,WAAYtB,KAAKP,MAAM6B,WACvBxB,SAAU,SAACO,EAASsD,GAAV,OAA0B,EAAKnE,MAAM+D,gBAAgBlD,EAASsD,IACxE9C,OAAQb,KAAKP,MAAMoB,OACnBF,SAAUX,KAAKR,MAAMa,QACrBY,KAAMjB,KAAKP,MAAMwB,UA3D7B,yCAmEI,GAAIjB,KAAKR,MAAMa,QACb,OACE,kBAACuD,EAAA,EAAD,CAAQC,KAAK,UAAb,2CArER,+BA0EWC,GACPA,EAAEC,iBACF/D,KAAKR,MAAMwE,kBA5Ef,GAA6BhC,IAAMC,W,kBCTtBgC,EAAb,YACE,WAAYzE,GAAsB,IAAD,8BAC/B,4CAAMA,KAEDC,MAAQ,GAHkB,EADnC,sEAQI,OAAIO,KAAKP,MAAMyE,KACN,yBAAKC,wBAAyB,CAACC,OAAQpE,KAAKP,MAAMyE,QAElD,eAXb,0CAeuB,IAAD,OAClBlE,KAAKR,MAAM6E,KAAKC,QAAQtE,KAAKR,MAAM+E,KAAKC,OAAOnD,MAAK,SAAAlC,GAClD,IAAMsF,EAASC,KAAKC,MAAMxF,GAEtBsF,EAAOE,OACT,EAAKxD,SAAS,CAAC+C,KAAMO,EAAOE,MAAMC,KAAK,cApB/C,GAA6B5C,IAAMC,W,kBCA7BoC,EAAO,ICZb,WAGE,WAAYlE,GAAgC,yBAF5C0E,SAAW,qCAGT7E,KAAK6E,SAAW1E,GAAWA,EAAQ0E,SAAW1E,EAAQ0E,SAAW7E,KAAK6E,SAJ1E,mDAOShC,GACL,OAAOiC,IAAG/F,IAAI,CACZgG,IAAK/E,KAAK6E,SACVG,GAAI,CACFC,OAAQ,IACRC,OAAQ,QACRC,KAAM,SACNC,SAAUvC,EACVwC,OAAQ,YAfhB,kCAoBcC,EAAeC,GACzB,OAAOT,IAAG/F,IAAI,CACZgG,IAAK/E,KAAK6E,SACVG,GAAI,CACFC,OAAQ,IACRC,OAAQ,QACRM,KAAM,YACNC,OAAQH,EACRI,OAAQ,MACRC,QAASJ,EACTK,QAAS,EACTP,OAAQ,YA/BhB,8BAoCUb,GACN,OAAOM,IAAG/F,IAAI,CACZgG,IAAK/E,KAAK6E,SACVG,GAAI,CACFC,OAAQ,IACRC,OAAQ,QACRG,OAAQ,OACRb,eA3CR,MD2BaqB,EAAb,YACE,WAAYrG,GAAsB,IAAD,8BAC/B,4CAAMA,KAEDC,MAAQ,CACXqG,MAAO,GACPjD,MAAO,GACPkD,cAAc,GAGhB,EAAKC,QAAU,EAAKA,QAAQnG,KAAb,gBACf,EAAKqD,SAAW,EAAKA,SAASrD,KAAd,gBAVe,EADnC,sEAcY,IAAD,OACP,OAAIG,KAAKR,MAAMmE,YAEX,kBAAC,IAAMsC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAOjF,KAAMjB,KAAKP,MAAMsG,aAAcI,QAAS,kBAAM,EAAKhF,SAAS,CAAC4E,cAAc,KAASK,UAAQ,GACjG,kBAACF,EAAA,EAAMG,KAAP,CAAYL,QAAS,kBAAMM,OAAOC,SAAS,EAAG,IAAIC,UAAU,iBAA5D,8CAIF,kBAACrD,EAAA,EAAD,KACE,kBAACsD,EAAA,EAAD,CAAOC,QAAQ,WAAf,+EAC+E1G,KAAKR,MAAMa,QAAQW,KADlG,MAIA,kBAACoC,EAAA,EAAD,CAAMF,SAAUlD,KAAKkD,UACnB,kBAACE,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,wCAGA,kBAACF,EAAA,EAAKuD,QAAN,CAAcC,MAAO5G,KAAKP,MAAMoD,MAClB/C,SAAU,SAACgE,GAAD,OAA4C,EAAK3C,SAAS,CAClE2E,MAAO,GACPjD,MAAOiB,EAAE+C,OAAOD,MAChBE,WAAW,QAG7B,kBAAClD,EAAA,EAAD,CAAQmD,SAAU/G,KAAKP,MAAMuH,QAASN,QAAQ,UAAU7C,KAAK,UAA7D,YAIH7D,KAAKiH,cAKR,kBAAC9D,EAAA,EAAD,KACE,kBAACsD,EAAA,EAAD,CAAOC,QAAQ,UAAf,+FAlDV,mCA2DI,OAAI1G,KAAKP,MAAMqG,MAAMlE,OAEjB,kBAACsF,EAAA,EAAD,CAAM1I,GAAG,WACNwB,KAAKP,MAAMqG,MAAM9C,KAAI,SAAAuB,GACpB,OACE,kBAAC4C,EAAA,EAAD,CAAKC,IAAK7C,EAAKe,MAAO+B,SAAU9C,EAAKe,MAAOA,MAAOf,EAAKe,OACtD,kBAAC,EAAD,CAASf,KAAMA,EAAMF,KAAMA,SAM5BrE,KAAKP,MAAMuH,QACb,kBAACP,EAAA,EAAD,CAAOC,QAAQ,WAAf,gBACE1G,KAAKP,MAAMqH,UACb,kBAACL,EAAA,EAAD,CAAOC,QAAQ,UAAf,2EADF,IAzEX,gCA8EYpB,GAAgB,IAAD,OACvB,IAAKtF,KAAKP,MAAMqG,MAAMwB,MAAK,SAAA/C,GAAI,OAAIA,EAAKe,QAAUA,KAChD,OAAOjB,EAAKkD,YAAYjC,EAAOtF,KAAKR,MAAMmE,YAAa6D,UAAUnG,MAAK,SAAAoG,GACpE,IAAM3B,EAAQpB,KAAKC,MAAM8C,GAAqB5E,MAAMiD,MAC9C4B,EAAY5B,EAAM6B,OAAOC,KAAK9B,GAAO,IAAI4B,UAE3CA,GAAaA,EAAU9F,QACzB,EAAKT,SAAS,CAAC2E,MAAO,EAAKrG,MAAMqG,MAAM+B,OAAO,CAAC,CAACvC,QAAOd,MAAOkD,EAAU,GAAGI,gBArFrF,+BA2FWhE,GAAqB,IAAD,OAC3BA,EAAEC,iBAEG/D,KAAKP,MAAMuH,UACdhH,KAAKmB,SAAS,CAAC6F,SAAS,EAAMlB,MAAO,GAAIgB,WAAW,IAEpDzC,EAAKtB,OAAO/C,KAAKP,MAAMoD,OAAOxB,MAAK,SAAA0G,GACjC,IAAMpI,EAAU+E,KAAKC,MAAMoD,GAEvBpI,EAAQkD,MAAME,OAAOnB,QACvBjD,QAAQqJ,IAAIrI,EAAQkD,MAAME,OAAOC,KAAI,SAACuB,GAAD,OAAgB,EAAK0D,UAAU1D,EAAKe,WAAS7D,SAAQ,kBAAM,EAAKN,SAAS,CAAC6F,SAAS,UAEzHrF,OAAM,WACP,EAAKR,SAAS,CAAC6F,SAAS,UAxGhC,8BA6GUlD,GAAgB,IAAD,OACfoE,EAAUpE,EAAE+C,OAElB,GAAwB,MAApBqB,EAAQC,QAAiB,CAC3B,IAAMC,EAASF,EAEf,GAAIE,EAAOC,SAASC,WAAW,UAAW,CACxC,IAAMC,EAASvI,KAAKiI,UAAUG,EAAOC,SAASG,UAAU,GAAGC,QAAQ,KAAM,MAEzEF,GAAUA,EAAOlH,MAAK,kBAAM,EAAKF,SAAS,CAAC4E,cAAc,YAC/CqC,EAAOM,KAAKJ,WAAWhC,OAAOqC,SAAS1D,SACjDqB,OAAOsC,KAAKR,EAAOM,KAAM,UAG3B5E,EAAEC,oBA3HR,0CAgIIuC,OAAOuC,iBAAiB,QAAS7I,KAAKgG,WAhI1C,6CAoIIM,OAAOwC,oBAAoB,QAAS9I,KAAKgG,aApI7C,GAA6BhE,IAAMC,WEgBpB8G,G,mBA1Bb,WAAYvJ,GAAkB,IAAD,8BAC3B,4CAAMA,KAEDC,MAAQ,CACXuJ,UAAW,YAJc,E,sEAQnB,IAAD,OACP,OACE,kBAAC9B,EAAA,EAAD,CAAM1I,GAAG,MAAMwK,UAAWhJ,KAAKP,MAAMuJ,UAAWC,SAAU,SAACD,GAAD,OAAuB,EAAK7H,SAAS,CAAC6H,gBAC9F,kBAAC7B,EAAA,EAAD,CAAKE,SAAS,WAAW/B,MAAM,kBAC7B,kBAAC,EAAD,CACE/B,gBAAiB,SAAClD,EAASsD,GAAV,OAA0B,EAAKxC,SAAS,CAACd,UAASsD,iBACnEtD,QAASL,KAAKP,MAAMY,QACpB2D,YAAa,kBAAM,EAAK7C,SAAS,CAAC6H,UAAW,iBAGjD,kBAAC7B,EAAA,EAAD,CAAKE,SAAS,WAAW/B,MAAM,YAAYyB,UAAW/G,KAAKP,MAAMY,SAC9DL,KAAKP,MAAMY,SAAW,kBAAC,EAAD,CAASA,QAASL,KAAKP,MAAMY,QAASsD,YAAa3D,KAAKP,MAAMkE,oB,GApB7E3B,IAAMC,Y,qBCTxBiH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ee7ea4ae.chunk.js","sourcesContent":["import request from \"request\";\nimport { Tvmaze } from \"tvmaze-api-ts\";\n\nclass PatchedTvmaze extends Tvmaze {\n  static apiEndpoint = \"https://api.tvmaze.com\";\n\n  constructor() {\n    super();\n\n    this.shows.episodes = (id: string, specials?: boolean) => {\n      let queryString = `/shows/${id}/episodes`;\n\n      if (specials) {\n        queryString += \"?specials=1\";\n      }\n\n      return new Promise((resolve, reject) => {\n        request.get(`${PatchedTvmaze.apiEndpoint}${queryString}`, { json: true }, (err, response) => {\n          if (err) {\n            return reject(err);\n          } else {\n            resolve(response.body);\n          }\n        })\n      });\n    }\n  }\n}\n\nexport const tvmaze = new PatchedTvmaze();\n","import React from \"react\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport { Episode, Season, Show } from \"../tvmaze/types\";\nimport { tvmaze } from \"../tvmaze/tvmaze\";\n\ninterface EpisodePickerProps {\n  onChange: (episode?: Episode, nextEpisode?: Episode) => void;\n  nextSeason?: Season;\n  show: Show;\n  season?: Season;\n  selected?: Episode;\n}\n\ninterface EpisodePickerState {\n  isLoading: boolean;\n  results: Episode[];\n  firstEpsiodeNextSeason?: Episode;\n}\n\nexport class EpisodePicker extends React.Component<EpisodePickerProps, EpisodePickerState> {\n  constructor(props: EpisodePickerProps) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      results: []\n    };\n\n    this.fetchEpisodes = this.fetchEpisodes.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  render() {\n    return (\n      <Typeahead\n        id=\"episode-picker\"\n        clearButton={true}\n        isLoading={this.state.isLoading}\n        labelKey={this.formatEpisodeName}\n        onChange={this.onChange}\n        options={this.state.results}\n        renderMenuItemChildren={episode => {\n          if (episode) {\n            const episodeName = this.formatEpisodeName(episode);\n            return (\n              <div>\n                {episode.image && <img src={episode.image.medium} alt={episodeName}/>}\n                {episodeName}\n              </div>\n            );\n          }\n        }}\n        selected={this.props.selected ? [this.props.selected] : []}\n      />\n    );\n  }\n\n  formatEpisodeName(episode: Episode) {\n    let seasonNumber: string | number = episode.season;\n    if (seasonNumber < 10) {\n      seasonNumber = `0${seasonNumber}`;\n    }\n\n    let episodeNumber: string | number = episode.number;\n    if (episodeNumber < 10) {\n      episodeNumber = `0${episodeNumber || \"0\"}`;\n    }\n\n    return `${seasonNumber}.${episodeNumber} - ${episode.name}`;\n  }\n\n  fetchEpisodes() {\n    const show = this.props.show.id.toString();\n\n    this.setState({isLoading: true});\n\n    if (this.props.season) {\n      tvmaze.shows.seasonEpisodes(this.props.season.id.toString())\n        .then(results => {\n          this.setState({results});\n\n          if (this.props.nextSeason) {\n            tvmaze.shows.episodebynumber(show, this.props.nextSeason.number.toString(), \"1\")\n              .then(firstEpsiodeNextSeason => this.setState({firstEpsiodeNextSeason}))\n              .finally(() => this.setState({isLoading: false}));\n          } else {\n            this.setState({firstEpsiodeNextSeason: undefined, isLoading: false});\n          }\n        }).catch(() => {\n          this.setState({isLoading: false});\n      })\n    } else {\n      tvmaze.shows.episodes(show)\n        .then(results => this.setState({results}))\n        .finally(() => this.setState({isLoading: false}));\n    }\n  }\n\n  onChange(selected: Episode[]) {\n    if (selected.length) {\n      const nextEpisodeIndex = this.state.results.indexOf(selected[0]) + 1;\n\n      if (this.state.results.length <= nextEpisodeIndex) {\n        this.props.onChange(selected[0], this.state.firstEpsiodeNextSeason);\n      } else {\n        this.props.onChange(selected[0], this.state.results[nextEpisodeIndex]);\n      }\n    } else {\n      this.props.onChange();\n    }\n  }\n\n  componentDidMount() {\n    this.fetchEpisodes();\n  }\n\n  componentDidUpdate(prevProps: EpisodePickerProps) {\n    if (this.props.show !== prevProps.show || this.props.season !== prevProps.season) {\n      this.fetchEpisodes();\n    }\n  }\n}\n","import React from \"react\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport { Season, Show } from \"../tvmaze/types\";\nimport { tvmaze } from \"../tvmaze/tvmaze\";\n\ninterface SeasonPickerProps {\n  onChange: (season?: Season, nextSeason?: Season) => void;\n  show: Show;\n  selected?: Season;\n}\n\ninterface SeasonPickerState {\n  isLoading: boolean;\n  results: Season[];\n}\n\nexport class SeasonPicker extends React.Component<SeasonPickerProps, SeasonPickerState> {\n  constructor(props: SeasonPickerProps) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      results: []\n    };\n\n    this.fetchSeasons = this.fetchSeasons.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  render() {\n    return (\n      <Typeahead\n        id=\"season-picker\"\n        clearButton={true}\n        filterBy={() => true}\n        isLoading={this.state.isLoading}\n        labelKey={this.formatSeasonName}\n        onChange={this.onChange}\n        options={this.state.results}\n        renderMenuItemChildren={season => {\n          const seasonName = this.formatSeasonName(season);\n          return (\n            <div>\n              {season.image && <img src={season.image.medium} alt={seasonName} />}\n              {seasonName}\n            </div>\n          );\n        }}\n        selected={this.props.selected ? [this.props.selected] : []}\n      />\n    );\n  }\n\n  formatSeasonName(season: Season) {\n    return [season.number, season.name].filter(namePart => !!namePart).join(\". \");\n  }\n\n  fetchSeasons() {\n    this.setState({isLoading: true});\n    tvmaze.shows.seasons(this.props.show.id.toString())\n      .then(results => this.setState({results}))\n      .finally(() => this.setState({isLoading: false}));\n  }\n\n  onChange(selected: Season[]) {\n    if (selected.length) {\n      const nextSeasonIndex = this.state.results.indexOf(selected[0]) + 1;\n\n      if (this.state.results.length <= nextSeasonIndex) {\n        this.props.onChange(selected[0]);\n      } else {\n        this.props.onChange(selected[0], this.state.results[nextSeasonIndex]);\n      }\n    } else {\n      this.props.onChange();\n    }\n  }\n\n  componentDidMount() {\n    this.fetchSeasons();\n  }\n\n  componentDidUpdate(prevProps: SeasonPickerProps) {\n    if (this.props.show !== prevProps.show) {\n      this.fetchSeasons();\n    }\n  }\n}\n","import { AsyncTypeahead } from \"react-bootstrap-typeahead\";\nimport React from \"react\";\n\nimport { Show } from \"../tvmaze/types\";\nimport { tvmaze } from \"../tvmaze/tvmaze\";\n\ninterface ShowPickerProps {\n  onChange: (selected: Show) => void;\n  selected?: Show;\n}\n\ninterface ShowPickerState {\n  isLoading: boolean;\n  query: string;\n  results: Show[];\n}\n\nexport class ShowPicker extends React.Component<ShowPickerProps, ShowPickerState> {\n  state = {\n    isLoading: false,\n    query: \"\",\n    results: []\n  };\n\n  render() {\n    return (\n      <AsyncTypeahead\n        id=\"show-picker\"\n        clearButton={true}\n        isLoading={this.state.isLoading}\n        labelKey={(show: Show) => show.name}\n        onSearch={query => {\n          this.setState({isLoading: true});\n          tvmaze.search.shows(query)\n            .then(results => this.setState({results: results.map(show => show.show)}))\n            .finally(() => this.setState({isLoading: false}));\n        }}\n        onChange={selected => this.props.onChange(selected[0])}\n        options={this.state.results}\n        renderMenuItemChildren={show => {\n          return (\n            <div>\n              {show.image && <img src={show.image.medium} alt={show.name} />}\n              {show.name}\n            </div>\n          );\n        }}\n        selected={this.props.selected ? [this.props.selected] : []}\n      />\n    );\n  }\n}\n","import Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport React from 'react'\n\nimport { Episode, Season, Show } from \"../tvmaze/types\";\nimport { EpisodePicker } from \"./episode-picker\";\nimport { SeasonPicker } from \"./season-picker\";\nimport { ShowPicker } from \"./show-picker\";\n\ninterface StepOneProps {\n  onEpisodeChange: (episode?: Episode, nextEpisode?: Episode) => void;\n  onNextClick: () => void;\n  episode?: Episode;\n  nextEpisode?: Episode;\n}\n\ninterface StepOneState {\n  nextSeason?: Season;\n  season?: Season;\n  show?: Show;\n}\n\nexport class StepOne extends React.Component<StepOneProps, StepOneState> {\n  constructor(props: StepOneProps) {\n    super(props);\n\n    this.state = {};\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  render() {\n    return (\n        <Jumbotron>\n          <Form onSubmit={this.onSubmit}>\n            <Form.Group>\n              <Form.Label>Search for the show you are watching:</Form.Label>\n              <ShowPicker\n                onChange={show => {\n                  this.setState({show, season: undefined});\n                  this.props.onEpisodeChange();\n                }}\n                selected={this.state.show}\n              />\n            </Form.Group>\n            {this.renderSeasonPicker()}\n            {this.renderEpisodePicker()}\n            {this.renderNextButton()}\n          </Form>\n        </Jumbotron>\n    );\n  }\n\n  renderSeasonPicker() {\n    if (this.state.show) {\n      return (\n        <Form.Group>\n          <Form.Label>Select the season you are watching:</Form.Label>\n          <SeasonPicker\n            onChange={(season, nextSeason) => {\n              this.setState({season, nextSeason});\n              this.props.onEpisodeChange();\n            }}\n            selected={this.state.season}\n            show={this.state.show}\n          />\n        </Form.Group>\n      );\n    }\n  }\n\n  renderEpisodePicker() {\n    if (this.state.show) {\n      return (\n        <Form.Group>\n          <Form.Label>Search for the last episode you've seen:</Form.Label>\n          <EpisodePicker\n            nextSeason={this.state.nextSeason}\n            onChange={(episode, nextEpisode) => this.props.onEpisodeChange(episode, nextEpisode)}\n            season={this.state.season}\n            selected={this.props.episode}\n            show={this.state.show}\n          />\n        </Form.Group>\n      );\n    }\n  }\n\n  renderNextButton() {\n    if (this.props.episode) {\n      return (\n        <Button type=\"submit\">Onward, to spoiler free web browsing!</Button>\n      );\n    }\n  }\n\n  onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    this.props.onNextClick();\n  }\n}\n","import React from \"react\";\n\nimport { Page } from \"../wikimedia/types\";\nimport { Wikimedia } from \"../wikimedia/wikimedia\";\n\ninterface BrowserProps {\n  page: Page;\n  wiki: Wikimedia;\n}\n\ninterface BrowserState {\n  html?: string;\n}\n\nexport class Browser extends React.Component<BrowserProps, BrowserState> {\n  constructor(props: BrowserProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    if (this.state.html) {\n      return <div dangerouslySetInnerHTML={{__html: this.state.html}} />\n    } else {\n      return \"Loading...\";\n    }\n  }\n\n  componentDidMount() {\n    this.props.wiki.getPage(this.props.page.oldid).then(response => {\n      const parsed = JSON.parse(response);\n\n      if (parsed.parse) {\n        this.setState({html: parsed.parse.text[\"*\"]});\n      }\n    });\n  }\n}\n","import Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport React from \"react\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Toast from \"react-bootstrap/Toast\";\n\nimport { Browser } from \"./browser\";\nimport { Episode } from \"../tvmaze/types\";\nimport { Page } from \"../wikimedia/types\";\nimport { Wikimedia } from \"../wikimedia/wikimedia\";\n\nconst wiki = new Wikimedia();\n\ninterface StepTwoProps {\n  episode: Episode;\n  nextEpisode?: Episode;\n}\n\ninterface StepTwoState {\n  pages: Page[];\n  query: string;\n  loading?: boolean;\n  submitted?: boolean;\n  toastVisible?: boolean;\n}\n\nexport class StepTwo extends React.Component<StepTwoProps, StepTwoState> {\n  constructor(props: StepTwoProps) {\n    super(props);\n\n    this.state = {\n      pages: [],\n      query: \"\",\n      toastVisible: false\n    };\n\n    this.onClick = this.onClick.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  render() {\n    if (this.props.nextEpisode) {\n      return (\n        <React.Fragment>\n          <Toast show={this.state.toastVisible} onClose={() => this.setState({toastVisible: false})} autohide>\n            <Toast.Body onClick={() => window.scrollTo(0, 0)} className=\"alert-primary\">\n              New tab opened!  Click here to scroll up.\n            </Toast.Body>\n          </Toast>\n          <Jumbotron>\n            <Alert variant=\"primary\">\n              You can browse Wikipedia below without any risk of spoilers beyond episode \"{this.props.episode.name}\".\n            </Alert>\n\n            <Form onSubmit={this.onSubmit}>\n              <Form.Group>\n                <Form.Label>\n                  Search for a Wikipedia article:\n                </Form.Label>\n                <Form.Control value={this.state.query}\n                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({\n                                pages: [],\n                                query: e.target.value,\n                                submitted: false\n                              })}/>\n              </Form.Group>\n              <Button disabled={this.state.loading} variant=\"primary\" type=\"submit\">Search</Button>\n            </Form>\n          </Jumbotron>\n\n          {this.renderTabs()}\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <Jumbotron>\n          <Alert variant=\"danger\">\n            You selected the last episode of the series!  Just go to Wikipedia like a normal person.\n          </Alert>\n        </Jumbotron>\n      );\n    }\n  }\n\n  renderTabs() {\n    if (this.state.pages.length) {\n      return (\n        <Tabs id=\"browser\">\n          {this.state.pages.map(page => {\n            return (\n              <Tab key={page.title} eventKey={page.title} title={page.title}>\n                <Browser page={page} wiki={wiki} />\n              </Tab>\n            );\n          })}\n        </Tabs>\n      );\n    } else if (this.state.loading) {\n      return <Alert variant=\"primary\">Searching...</Alert>;\n    } else if (this.state.submitted) {\n      return <Alert variant=\"danger\">Sorry, no results were found from before the next episode aired :(</Alert>;\n    }\n  }\n\n  fetchPage(title: string) {\n    if (!this.state.pages.find(page => page.title === title)) {\n      return wiki.getRevision(title, this.props.nextEpisode!.airstamp).then(getRevisionResponse => {\n        const pages = JSON.parse(getRevisionResponse).query.pages;\n        const revisions = pages[Object.keys(pages)[0]].revisions;\n\n        if (revisions && revisions.length) {\n          this.setState({pages: this.state.pages.concat([{title, oldid: revisions[0].revid}])});\n        }\n      });\n    }\n  }\n\n  onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n\n    if (!this.state.loading) {\n      this.setState({loading: true, pages: [], submitted: true});\n\n      wiki.search(this.state.query).then(searchResponse => {\n        const results = JSON.parse(searchResponse);\n\n        if (results.query.search.length) {\n          Promise.all(results.query.search.map((page: Page) => this.fetchPage(page.title))).finally(() => this.setState({loading: false}));\n        }\n      }).catch(() => {\n        this.setState({loading: false});\n      });\n    }\n  }\n\n  onClick(e: MouseEvent) {\n    const element = e.target as HTMLElement;\n\n    if (element.tagName === \"A\") {\n      const anchor = element as HTMLAnchorElement;\n\n      if (anchor.pathname.startsWith(\"/wiki/\")) {\n        const newtab = this.fetchPage(anchor.pathname.substring(6).replace(/_/g, \" \"));\n\n        newtab && newtab.then(() => this.setState({toastVisible: true}));\n      } else if (!anchor.href.startsWith(window.location.origin)) {\n        window.open(anchor.href, \"_blank\");\n      }\n\n      e.preventDefault();\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"click\", this.onClick);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"click\", this.onClick)\n  }\n}\n","import rp from \"request-promise-native\";\n\nexport class Wikimedia {\n  endpoint = \"https://en.wikipedia.org/w/api.php\";\n\n  constructor(options?: {endpoint?: string}) {\n    this.endpoint = options && options.endpoint ? options.endpoint : this.endpoint;\n  }\n\n  search(query: string) {\n    return rp.get({\n      uri: this.endpoint,\n      qs: {\n        origin: \"*\",\n        action: \"query\",\n        list: \"search\",\n        srsearch: query,\n        format: \"json\"\n      }\n    });\n  }\n\n  getRevision(title: string, before: string) {\n    return rp.get({\n      uri: this.endpoint,\n      qs: {\n        origin: \"*\",\n        action: \"query\",\n        prop: \"revisions\",\n        titles: title,\n        rvprop: \"ids\",\n        rvstart: before,\n        rvlimit: 1,\n        format: \"json\"\n      }\n    });\n  }\n\n  getPage(oldid: number) {\n    return rp.get({\n      uri: this.endpoint,\n      qs: {\n        origin: \"*\",\n        action: \"parse\",\n        format: \"json\",\n        oldid\n      }\n    });\n  }\n}\n","import React from 'react'\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\n\nimport { Episode } from \"./tvmaze/types\";\nimport { StepOne } from \"./step-one/step-one\";\nimport { StepTwo } from \"./step-two/step-two\";\n\nimport './App.css';\n\ninterface AppProps {}\n\ninterface AppState {\n  activeKey: string;\n  episode?: Episode;\n  nextEpisode?: Episode;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      activeKey: \"step-one\"\n    };\n  }\n\n  render() {\n    return (\n      <Tabs id=\"app\" activeKey={this.state.activeKey} onSelect={(activeKey: string) => this.setState({activeKey})}>\n        <Tab eventKey=\"step-one\" title=\"Episode Picker\">\n          <StepOne\n            onEpisodeChange={(episode, nextEpisode) => this.setState({episode, nextEpisode})}\n            episode={this.state.episode}\n            onNextClick={() => this.setState({activeKey: \"step-two\"})}\n          />\n        </Tab>\n        <Tab eventKey=\"step-two\" title=\"Wikipedia\" disabled={!this.state.episode}>\n          {this.state.episode && <StepTwo episode={this.state.episode} nextEpisode={this.state.nextEpisode} />}\n        </Tab>\n      </Tabs>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.min.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}